# the name of the target operating system
set (CMAKE_SYSTEM_NAME Linux)
set (TOOLCHAIN_ROOT /home/kenn/BRCMToolChain/stbgcc-4.8-1.2)

#Suppress va_args mangling messages
set (CFLAGS "${CFLAGS} -mtune=cortex-a15 -march=armv7-a -Wno-psabi") 
set (CXX_FLAGS "${CXX_FLAGS} -mtune=cortex-a15 -march=armv7-a -Wno-psabi")

#if ("${BUILD_TYPE}" STREQUAL "debug")

# set debug flags for ARM
# -mapcs - generate stack frames always for debug builds so when we crash
#          then there is more to actually dig through the stack
# -mno-sched-prolog - make any possible crash more likely to generate a workable stack trace
#
#    set (CFLAGS "${CFLAGS} -mapcs -mno-sched-prolog") 
#    set (CXX_FLAGS "${CXX_FLAGS} -mapcs -mno-sched-prolog")
#endif()

#set (CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} --enable-gold")

# which compilers to use for C and C++
set (CMAKE_C_COMPILER ${TOOLCHAIN_ROOT}/bin/arm-linux-gnueabihf-gcc)
set (CMAKE_CXX_COMPILER ${TOOLCHAIN_ROOT}/bin/arm-linux-gnueabihf-g++)

# Specify where is the target environment located
set (CMAKE_FIND_ROOT_PATH 
  ${TOOLCHAIN_ROOT}/arm-linux-gnueabihf/sys-root
  ${TOOLCHAIN_ROOT}/arm-linux-gnueabihf/sys-root/lib
  ${TOOLCHAIN_ROOT}/arm-linux-gnueabihf/lib
  ${TOOLCHAIN_ROOT}/arm-linux-gnueabihf/sys-root/usr/include
  ${TOOLCHAIN_ROOT}/arm-linux-gnueabihf/sys-root/usr/lib
)

# search programs in the host environment
set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# search headers and libraries in the target environment
set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

